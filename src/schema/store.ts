
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface UserScoreSnapshotConstructorInput {
  id: ID;
  timestamp?: Int;
  block_date?: String;
  chain_id?: Int;
  block_number?: Int;
  user_address?: String;
  pool_address?: String;
  total_value_locked_score: Float;
  market_depth_score?: Int;
}
@Entity("UserScoreSnapshot")
export class UserScoreSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Int")
	timestamp?: Int

	@Column("String")
	block_date?: String

	@Column("Int")
	chain_id?: Int

	@Column("Int")
	block_number?: Int

	@Column("String")
	user_address?: String

	@Column("String")
	pool_address?: String

	@Required
	@Column("Float")
	total_value_locked_score: Float

	@Column("Int")
	market_depth_score?: Int
  constructor(data: UserScoreSnapshotConstructorInput) {super()}
  
}


interface BalanceConstructorInput {
  id: ID;
  user: String;
  pool_address: String;
  tvl: Float;
}
@Entity("Balance")
export class Balance extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	user: String

	@Required
	@Column("String")
	pool_address: String

	@Required
	@Column("Float")
	tvl: Float
  constructor(data: BalanceConstructorInput) {super()}
  
}


interface MainPriceConstructorInput {
  id: ID;
  eth_usd: Float;
  usdc_usd: Float;
  fuel_usd: Float;
}
@Entity("MainPrice")
export class MainPrice extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("Float")
	eth_usd: Float

	@Required
	@Column("Float")
	usdc_usd: Float

	@Required
	@Column("Float")
	fuel_usd: Float
  constructor(data: MainPriceConstructorInput) {super()}
  
}


interface PoolConstructorInput {
  id: ID;
  chain_id: Int;
  creation_block_number: Int;
  timestamp: Int;
  pool_address: String;
  lp_token_address: String;
  lp_token_symbol: String;
  token_address: String;
  token_symbol: String;
  token_decimals: Float;
  token_index: Float;
  fee_rate?: Float;
  dex_type: String;
  token_amount: Float;
  volume_amount: Float;
  total_fees_usd?: Float;
  volume_usd?: Float;
  token_amount_usd?: Float;
  asset_0?: String;
  asset_1?: String;
  is_stable?: Boolean;
  reserve_0: BigInt;
  reserve_1: BigInt;
  decimals_0?: Int;
  decimals_1?: Int;
  tvl_usd?: Float;
  tvl?: BigInt;
  exchange_rate?: BigInt;
  lp_amount?: BigInt;
}
@Entity("Pool")
export class Pool extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("Int")
	chain_id: Int

	@Required
	@Column("Int")
	creation_block_number: Int

	@Required
	@Column("Int")
	timestamp: Int

	@Required
	@Column("String")
	pool_address: String

	@Required
	@Column("String")
	lp_token_address: String

	@Required
	@Column("String")
	lp_token_symbol: String

	@Required
	@Column("String")
	token_address: String

	@Required
	@Column("String")
	token_symbol: String

	@Required
	@Column("Float")
	token_decimals: Float

	@Required
	@Column("Float")
	token_index: Float

	@Column("Float")
	fee_rate?: Float

	@Required
	@Column("String")
	dex_type: String

	@Required
	@Column("Float")
	token_amount: Float

	@Required
	@Column("Float")
	volume_amount: Float

	@Column("Float")
	total_fees_usd?: Float

	@Column("Float")
	volume_usd?: Float

	@Column("Float")
	token_amount_usd?: Float

	@Column("String")
	asset_0?: String

	@Column("String")
	asset_1?: String

	@Column("Boolean")
	is_stable?: Boolean

	@Required
	@Column("BigInt")
	reserve_0: BigInt

	@Required
	@Column("BigInt")
	reserve_1: BigInt

	@Column("Int")
	decimals_0?: Int

	@Column("Int")
	decimals_1?: Int

	@Column("Float")
	tvl_usd?: Float

	@Column("BigInt")
	tvl?: BigInt

	@Column("BigInt")
	exchange_rate?: BigInt

	@Column("BigInt")
	lp_amount?: BigInt
  constructor(data: PoolConstructorInput) {super()}
  
}


interface LPPositionConstructorInput {
  id: ID;
  pool_address?: String;
  user_address?: String;
  token_index?: Float;
  token_address?: String;
  token_symbol?: String;
  token_amount?: Float;
  token_amount_usd?: Float;
  tvl_usd?: Float;
  ratio?: Float;
  pool_token_amount?: Float;
  liquidity_token_amount?: Float;
}
@Entity("LPPosition")
export class LPPosition extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("String")
	pool_address?: String

	@Column("String")
	user_address?: String

	@Column("Float")
	token_index?: Float

	@Column("String")
	token_address?: String

	@Column("String")
	token_symbol?: String

	@Column("Float")
	token_amount?: Float

	@Column("Float")
	token_amount_usd?: Float

	@Column("Float")
	tvl_usd?: Float

	@Column("Float")
	ratio?: Float

	@Column("Float")
	pool_token_amount?: Float

	@Column("Float")
	liquidity_token_amount?: Float
  constructor(data: LPPositionConstructorInput) {super()}
  
}


interface LPPositionSnapshotConstructorInput {
  id: ID;
  timestamp?: Int;
  block_date?: String;
  chain_id?: Int;
  pool_address?: String;
  user_address?: String;
  token_index?: Float;
  token_address?: String;
  token_symbol?: String;
  token_amount?: Float;
  token_amount_usd?: Float;
}
@Entity("LPPositionSnapshot")
export class LPPositionSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Int")
	timestamp?: Int

	@Column("String")
	block_date?: String

	@Column("Int")
	chain_id?: Int

	@Column("String")
	pool_address?: String

	@Column("String")
	user_address?: String

	@Column("Float")
	token_index?: Float

	@Column("String")
	token_address?: String

	@Column("String")
	token_symbol?: String

	@Column("Float")
	token_amount?: Float

	@Column("Float")
	token_amount_usd?: Float
  constructor(data: LPPositionSnapshotConstructorInput) {super()}
  
}


interface PoolSnapshotConstructorInput {
  id: ID;
  timestamp?: Int;
  block_date?: String;
  chain_id?: Int;
  pool_address?: String;
  token_index?: Float;
  token_address?: String;
  token_symbol?: String;
  token_amount?: Float;
  token_amount_usd?: Float;
  volume_amount?: Float;
  volume_usd?: Float;
  fee_rate?: Float;
  total_fees_usd?: Float;
  user_fees_usd?: Float;
  protocol_fees_usd?: Float;
}
@Entity("PoolSnapshot")
export class PoolSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Int")
	timestamp?: Int

	@Column("String")
	block_date?: String

	@Column("Int")
	chain_id?: Int

	@Column("String")
	pool_address?: String

	@Column("Float")
	token_index?: Float

	@Column("String")
	token_address?: String

	@Column("String")
	token_symbol?: String

	@Column("Float")
	token_amount?: Float

	@Column("Float")
	token_amount_usd?: Float

	@Column("Float")
	volume_amount?: Float

	@Column("Float")
	volume_usd?: Float

	@Column("Float")
	fee_rate?: Float

	@Column("Float")
	total_fees_usd?: Float

	@Column("Float")
	user_fees_usd?: Float

	@Column("Float")
	protocol_fees_usd?: Float
  constructor(data: PoolSnapshotConstructorInput) {super()}
  
}


interface TradesConstructorInput {
  id: ID;
  timestamp?: Int;
  chain_id?: Int;
  block_number?: Int;
  log_index?: Int;
  transaction_hash?: String;
  user_address?: String;
  taker_address?: String;
  maker_address?: String;
  pair_name?: String;
  pool_address?: String;
  input_token_address?: String;
  input_token_symbol?: String;
  input_token_amount?: Float;
  output_token_address?: String;
  output_token_symbol?: String;
  output_token_amount?: Float;
  spot_price_after_swap?: Float;
  swap_amount_usd?: Float;
  fees_usd?: Float;
  sqrt_price_x96?: String;
}
@Entity("Trades")
export class Trades extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Int")
	timestamp?: Int

	@Column("Int")
	chain_id?: Int

	@Column("Int")
	block_number?: Int

	@Column("Int")
	log_index?: Int

	@Column("String")
	transaction_hash?: String

	@Column("String")
	user_address?: String

	@Column("String")
	taker_address?: String

	@Column("String")
	maker_address?: String

	@Column("String")
	pair_name?: String

	@Column("String")
	pool_address?: String

	@Column("String")
	input_token_address?: String

	@Column("String")
	input_token_symbol?: String

	@Column("Float")
	input_token_amount?: Float

	@Column("String")
	output_token_address?: String

	@Column("String")
	output_token_symbol?: String

	@Column("Float")
	output_token_amount?: Float

	@Column("Float")
	spot_price_after_swap?: Float

	@Column("Float")
	swap_amount_usd?: Float

	@Column("Float")
	fees_usd?: Float

	@Column("String")
	sqrt_price_x96?: String
  constructor(data: TradesConstructorInput) {super()}
  
}


interface V2MintsConstructorInput {
  id: ID;
  timestamp?: Int;
  chain_id?: Int;
  block_number?: Int;
  log_index?: Int;
  transaction_hash?: String;
  transaction_from_address?: String;
  from_address?: String;
  to_address?: String;
  pool_address?: String;
  token0_address?: String;
  token0_amount?: Float;
  token1_address?: String;
  token1_amount?: Float;
  mint_amount?: Float;
  mint_amount_usd?: Float;
}
@Entity("V2Mints")
export class V2Mints extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Int")
	timestamp?: Int

	@Column("Int")
	chain_id?: Int

	@Column("Int")
	block_number?: Int

	@Column("Int")
	log_index?: Int

	@Column("String")
	transaction_hash?: String

	@Column("String")
	transaction_from_address?: String

	@Column("String")
	from_address?: String

	@Column("String")
	to_address?: String

	@Column("String")
	pool_address?: String

	@Column("String")
	token0_address?: String

	@Column("Float")
	token0_amount?: Float

	@Column("String")
	token1_address?: String

	@Column("Float")
	token1_amount?: Float

	@Column("Float")
	mint_amount?: Float

	@Column("Float")
	mint_amount_usd?: Float
  constructor(data: V2MintsConstructorInput) {super()}
  
}


interface V2BurnsConstructorInput {
  id: ID;
  timestamp?: Int;
  chain_id?: Int;
  block_number?: Int;
  log_index?: Int;
  transaction_hash?: String;
  transaction_from_address?: String;
  from_address?: String;
  to_address?: String;
  pool_address?: String;
  token0_address?: String;
  token0_amount?: Float;
  token1_address?: String;
  token1_amount?: Float;
  burn_amount?: Float;
  burn_amount_usd?: Float;
}
@Entity("V2Burns")
export class V2Burns extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Int")
	timestamp?: Int

	@Column("Int")
	chain_id?: Int

	@Column("Int")
	block_number?: Int

	@Column("Int")
	log_index?: Int

	@Column("String")
	transaction_hash?: String

	@Column("String")
	transaction_from_address?: String

	@Column("String")
	from_address?: String

	@Column("String")
	to_address?: String

	@Column("String")
	pool_address?: String

	@Column("String")
	token0_address?: String

	@Column("Float")
	token0_amount?: Float

	@Column("String")
	token1_address?: String

	@Column("Float")
	token1_amount?: Float

	@Column("Float")
	burn_amount?: Float

	@Column("Float")
	burn_amount_usd?: Float
  constructor(data: V2BurnsConstructorInput) {super()}
  
}


interface V2SyncsConstructorInput {
  id: ID;
  timestamp?: Timestamp;
  chain_id?: Int;
  block_number?: BigInt;
  log_index?: BigInt;
  transaction_hash?: String;
  pool_address?: String;
  token0_address?: String;
  token0_amount?: Float;
  token1_address?: String;
  token1_amount?: Float;
}
@Entity("V2Syncs")
export class V2Syncs extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Timestamp")
	timestamp?: Timestamp

	@Column("Int")
	chain_id?: Int

	@Column("BigInt")
	block_number?: BigInt

	@Column("BigInt")
	log_index?: BigInt

	@Column("String")
	transaction_hash?: String

	@Column("String")
	pool_address?: String

	@Column("String")
	token0_address?: String

	@Column("Float")
	token0_amount?: Float

	@Column("String")
	token1_address?: String

	@Column("Float")
	token1_amount?: Float
  constructor(data: V2SyncsConstructorInput) {super()}
  
}


interface V2TransfersConstructorInput {
  id: ID;
  timestamp?: Int;
  chain_id?: Int;
  block_number?: Int;
  log_index?: Int;
  transaction_hash?: String;
  transaction_from_address?: String;
  from_address?: String;
  to_address?: String;
  pool_address?: String;
  token_amount?: Float;
}
@Entity("V2Transfers")
export class V2Transfers extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Int")
	timestamp?: Int

	@Column("Int")
	chain_id?: Int

	@Column("Int")
	block_number?: Int

	@Column("Int")
	log_index?: Int

	@Column("String")
	transaction_hash?: String

	@Column("String")
	transaction_from_address?: String

	@Column("String")
	from_address?: String

	@Column("String")
	to_address?: String

	@Column("String")
	pool_address?: String

	@Column("Float")
	token_amount?: Float
  constructor(data: V2TransfersConstructorInput) {super()}
  
}


interface IncentiveClaimDataConstructorInput {
  id: ID;
  timestamp?: Timestamp;
  chain_id?: Int;
  transaction_hash?: String;
  log_index?: BigInt;
  transaction_signer?: String;
  user_address?: String;
  claimed_token_address?: String;
  amount?: Float;
  amount_usd?: Float;
  other_incentive_usd?: Float;
}
@Entity("IncentiveClaimData")
export class IncentiveClaimData extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Timestamp")
	timestamp?: Timestamp

	@Column("Int")
	chain_id?: Int

	@Column("String")
	transaction_hash?: String

	@Column("BigInt")
	log_index?: BigInt

	@Column("String")
	transaction_signer?: String

	@Column("String")
	user_address?: String

	@Column("String")
	claimed_token_address?: String

	@Column("Float")
	amount?: Float

	@Column("Float")
	amount_usd?: Float

	@Column("Float")
	other_incentive_usd?: Float
  constructor(data: IncentiveClaimDataConstructorInput) {super()}
  
}


interface LiquidityTransactionEventConstructorInput {
  id: ID;
  timestamp?: Int;
  chain_id?: Int;
  block_number?: Int;
  log_index?: Int;
  transaction_hash?: String;
  user_address?: String;
  taker_address?: String;
  pool_address?: String;
  token_address?: String;
  token_index?: Int;
  token_amount?: Float;
  token_amount_usd?: Float;
  event_type?: String;
}
@Entity("LiquidityTransactionEvent")
export class LiquidityTransactionEvent extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Column("Int")
	timestamp?: Int

	@Column("Int")
	chain_id?: Int

	@Column("Int")
	block_number?: Int

	@Column("Int")
	log_index?: Int

	@Column("String")
	transaction_hash?: String

	@Column("String")
	user_address?: String

	@Column("String")
	taker_address?: String

	@Column("String")
	pool_address?: String

	@Column("String")
	token_address?: String

	@Column("Int")
	token_index?: Int

	@Column("Float")
	token_amount?: Float

	@Column("Float")
	token_amount_usd?: Float

	@Column("String")
	event_type?: String
  constructor(data: LiquidityTransactionEventConstructorInput) {super()}
  
}


interface Diesel_TotalSupplyEventConstructorInput {
  id: ID;
  time: Int;
  block_height: Int;
  transaction_id: String;
  asset: String;
  supply: BigInt;
  sender: String;
}
@Entity("Diesel_TotalSupplyEvent")
export class Diesel_TotalSupplyEvent extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("Int")
	time: Int

	@Required
	@Column("Int")
	block_height: Int

	@Required
	@Column("String")
	transaction_id: String

	@Required
	@Column("String")
	asset: String

	@Required
	@Column("BigInt")
	supply: BigInt

	@Required
	@Column("String")
	sender: String
  constructor(data: Diesel_TotalSupplyEventConstructorInput) {super()}
  
}


const source = `type UserScoreSnapshot @entity {
  id: ID!
  timestamp: Int
  block_date: String
  chain_id: Int
  block_number: Int
  user_address: String
  pool_address: String
  total_value_locked_score: Float!
  market_depth_score: Int
}

type Balance @entity {
  id: ID!
  user: String!
  pool_address: String!
  tvl: Float!
}

type MainPrice @entity {
  id: ID!
  eth_usd: Float!
  usdc_usd: Float!
  fuel_usd: Float!
}

type Pool @entity {
  id: ID!
  chain_id: Int!
  creation_block_number: Int!
  timestamp: Int!
  pool_address: String!
  lp_token_address: String!
  lp_token_symbol: String!
  token_address: String!
  token_symbol: String!
  token_decimals: Float!
  token_index: Float!
  fee_rate: Float
  dex_type: String!
  token_amount: Float!
  volume_amount: Float!
  total_fees_usd: Float
  volume_usd: Float
  token_amount_usd: Float

  asset_0: String
  asset_1: String
  is_stable: Boolean
  reserve_0: BigInt!
  reserve_1: BigInt!
  decimals_0: Int
  decimals_1: Int
  tvl_usd: Float
  tvl: BigInt
  exchange_rate: BigInt

  lp_amount: BigInt
}

type LPPosition @entity {
  id: ID!
  pool_address: String
  user_address: String
  token_index: Float
  token_address: String
  token_symbol: String
  token_amount: Float
  token_amount_usd: Float
  tvl_usd: Float
  ratio: Float
  pool_token_amount: Float
  liquidity_token_amount: Float
}

type LPPositionSnapshot @entity {
  id: ID!
  timestamp: Int
  block_date: String
  chain_id: Int
  pool_address: String
  user_address: String
  token_index: Float
  token_address: String
  token_symbol: String
  token_amount: Float
  token_amount_usd: Float
}

type PoolSnapshot @entity {
  id: ID!
  timestamp: Int
  block_date: String
  chain_id: Int
  pool_address: String
  token_index: Float
  token_address: String
  token_symbol: String
  token_amount: Float
  token_amount_usd: Float
  volume_amount: Float
  volume_usd: Float
  fee_rate: Float
  total_fees_usd: Float
  user_fees_usd: Float
  protocol_fees_usd: Float
}

type Trades @entity {
  id: ID!
  timestamp: Int
  chain_id: Int
  block_number: Int
  log_index: Int
  transaction_hash: String
  user_address: String
  taker_address: String
  maker_address: String
  pair_name: String
  pool_address: String
  input_token_address: String
  input_token_symbol: String
  input_token_amount: Float
  output_token_address: String
  output_token_symbol: String
  output_token_amount: Float
  spot_price_after_swap: Float
  swap_amount_usd: Float
  fees_usd: Float
  sqrt_price_x96: String
}

type V2Mints @entity {
  id: ID!
  timestamp: Int
  chain_id: Int
  block_number: Int
  log_index: Int
  transaction_hash: String
  transaction_from_address: String
  from_address: String
  to_address: String
  pool_address: String
  token0_address: String
  token0_amount: Float
  token1_address: String
  token1_amount: Float
  mint_amount: Float
  mint_amount_usd: Float
}

type V2Burns @entity {
  id: ID!
  timestamp: Int
  chain_id: Int
  block_number: Int
  log_index: Int
  transaction_hash: String
  transaction_from_address: String
  from_address: String
  to_address: String
  pool_address: String
  token0_address: String
  token0_amount: Float
  token1_address: String
  token1_amount: Float
  burn_amount: Float
  burn_amount_usd: Float
}

type V2Syncs @entity {
  id: ID!
  timestamp: Timestamp
  chain_id: Int
  block_number: BigInt
  log_index: BigInt
  transaction_hash: String
  pool_address: String
  token0_address: String
  token0_amount: Float
  token1_address: String
  token1_amount: Float
}

type V2Transfers @entity {
  id: ID!
  timestamp: Int
  chain_id: Int
  block_number: Int
  log_index: Int
  transaction_hash: String
  transaction_from_address: String
  from_address: String
  to_address: String
  pool_address: String
  token_amount: Float
}

type IncentiveClaimData @entity {
  id: ID!
  timestamp: Timestamp
  chain_id: Int
  transaction_hash: String
  log_index: BigInt
  transaction_signer: String
  user_address: String
  claimed_token_address: String
  amount: Float
  amount_usd: Float
  other_incentive_usd: Float
}

type LiquidityTransactionEvent @entity {
  id: ID!
  timestamp: Int
  chain_id: Int
  block_number: Int
  log_index: Int
  transaction_hash: String
  user_address: String
  taker_address: String
  pool_address: String
  token_address: String
  token_index: Int
  token_amount: Float
  token_amount_usd: Float
  event_type: String
}

type Diesel_TotalSupplyEvent @entity {
  id: ID!
  time: Int!
  block_height: Int!
  transaction_id: String!
  asset: String!
  supply: BigInt!
  sender: String!
}
`
DatabaseSchema.register({
  source,
  entities: {
    "UserScoreSnapshot": UserScoreSnapshot,
		"Balance": Balance,
		"MainPrice": MainPrice,
		"Pool": Pool,
		"LPPosition": LPPosition,
		"LPPositionSnapshot": LPPositionSnapshot,
		"PoolSnapshot": PoolSnapshot,
		"Trades": Trades,
		"V2Mints": V2Mints,
		"V2Burns": V2Burns,
		"V2Syncs": V2Syncs,
		"V2Transfers": V2Transfers,
		"IncentiveClaimData": IncentiveClaimData,
		"LiquidityTransactionEvent": LiquidityTransactionEvent,
		"Diesel_TotalSupplyEvent": Diesel_TotalSupplyEvent
  }
})
