/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */
    
import { FuelAbstractProcessor, FuelContractContext, FuelProcessorConfig, TypedCall, FuelFetchConfig, FuelCall, FuelLog, addFuelProcessor, getFuelProcessor, FuelBaseProcessorTemplate } from '@sentio/sdk/fuel'
import {Option,Enum} from './common.js'
import {AmmErrorInput,AmmErrorOutput,InputErrorInput,InputErrorOutput,AccessErrorInput,AccessErrorOutput,StateInput,StateOutput,IdentityInput,IdentityOutput,InitializationErrorInput,InitializationErrorOutput,ReentrancyErrorInput,ReentrancyErrorOutput,AssetInput,AssetOutput,PoolMetadataInput,PoolMetadataOutput,BurnEventInput,BurnEventOutput,CreatePoolEventInput,CreatePoolEventOutput,MintEventInput,MintEventOutput,SwapEventInput,SwapEventOutput,SetDecimalsEventInput,SetDecimalsEventOutput,SetNameEventInput,SetNameEventOutput,SetSymbolEventInput,SetSymbolEventOutput,TotalSupplyEventInput,TotalSupplyEventOutput,AddressInput,AddressOutput,AssetIdInput,AssetIdOutput,ContractIdInput,ContractIdOutput,OwnershipSetInput,OwnershipSetOutput,OwnershipTransferredInput,OwnershipTransferredOutput, DieselAmmContract} from './DieselAmmContract.js'

import type { BigNumberish, BN } from 'fuels';
import type { BytesLike, Bytes, StdString, StrSlice, RawSlice, B256Address, ChecksumAddress, Bech32Address } from 'fuels';


namespace DieselAmmContractNS {
  export abstract class CallWithLogs<T extends Array<any>, R> extends TypedCall<T, R> {

    getLogsOfTypeReentrancyError(): Array<ReentrancyErrorOutput> {
      return this.logs?.filter(l =>["5557842539076482339"].includes(l.logId) ).map(l => l.data) as Array<ReentrancyErrorOutput>
    }

    getLogsOfTypeInputError(): Array<InputErrorOutput> {
      return this.logs?.filter(l =>["3176768710663004356"].includes(l.logId) ).map(l => l.data) as Array<InputErrorOutput>
    }

    getLogsOfTypeAmmError(): Array<AmmErrorOutput> {
      return this.logs?.filter(l =>["8431332278172281949"].includes(l.logId) ).map(l => l.data) as Array<AmmErrorOutput>
    }

    getLogsOfTypeTotalSupplyEvent(): Array<TotalSupplyEventOutput> {
      return this.logs?.filter(l =>["17462098202904023478"].includes(l.logId) ).map(l => l.data) as Array<TotalSupplyEventOutput>
    }

    getLogsOfTypeBurnEvent(): Array<BurnEventOutput> {
      return this.logs?.filter(l =>["3903049024573527731"].includes(l.logId) ).map(l => l.data) as Array<BurnEventOutput>
    }

    getLogsOfTypeSetNameEvent(): Array<SetNameEventOutput> {
      return this.logs?.filter(l =>["7845998088195677205"].includes(l.logId) ).map(l => l.data) as Array<SetNameEventOutput>
    }

    getLogsOfTypeSetSymbolEvent(): Array<SetSymbolEventOutput> {
      return this.logs?.filter(l =>["12152039456660331088"].includes(l.logId) ).map(l => l.data) as Array<SetSymbolEventOutput>
    }

    getLogsOfTypeSetDecimalsEvent(): Array<SetDecimalsEventOutput> {
      return this.logs?.filter(l =>["18149631459970394923"].includes(l.logId) ).map(l => l.data) as Array<SetDecimalsEventOutput>
    }

    getLogsOfTypeCreatePoolEvent(): Array<CreatePoolEventOutput> {
      return this.logs?.filter(l =>["12224862438738316526"].includes(l.logId) ).map(l => l.data) as Array<CreatePoolEventOutput>
    }

    getLogsOfTypeMintEvent(): Array<MintEventOutput> {
      return this.logs?.filter(l =>["12547144180067087194"].includes(l.logId) ).map(l => l.data) as Array<MintEventOutput>
    }

    getLogsOfTypeAccessError(): Array<AccessErrorOutput> {
      return this.logs?.filter(l =>["4571204900286667806"].includes(l.logId) ).map(l => l.data) as Array<AccessErrorOutput>
    }

    getLogsOfTypeSwapEvent(): Array<SwapEventOutput> {
      return this.logs?.filter(l =>["7938487056892321597"].includes(l.logId) ).map(l => l.data) as Array<SwapEventOutput>
    }

    getLogsOfTypeInitializationError(): Array<InitializationErrorOutput> {
      return this.logs?.filter(l =>["2161305517876418151"].includes(l.logId) ).map(l => l.data) as Array<InitializationErrorOutput>
    }

    getLogsOfTypeOwnershipSet(): Array<OwnershipSetOutput> {
      return this.logs?.filter(l =>["16280289466020123285"].includes(l.logId) ).map(l => l.data) as Array<OwnershipSetOutput>
    }

    getLogsOfTypeOwnershipTransferred(): Array<OwnershipTransferredOutput> {
      return this.logs?.filter(l =>["12970362301975156672"].includes(l.logId) ).map(l => l.data) as Array<OwnershipTransferredOutput>
    }
  }


}

type LogIdFilter<T> = T | T[]
const LogReentrancyErrorId = "5557842539076482339"
const LogInputErrorId = "3176768710663004356"
const LogAmmErrorId = "8431332278172281949"
const LogTotalSupplyEventId = "17462098202904023478"
const LogBurnEventId = "3903049024573527731"
const LogSetNameEventId = "7845998088195677205"
const LogSetSymbolEventId = "12152039456660331088"
const LogSetDecimalsEventId = "18149631459970394923"
const LogCreatePoolEventId = "12224862438738316526"
const LogMintEventId = "12547144180067087194"
const LogAccessErrorId = "4571204900286667806"
const LogSwapEventId = "7938487056892321597"
const LogInitializationErrorId = "2161305517876418151"
const LogOwnershipSetId = "16280289466020123285"
const LogOwnershipTransferredId = "12970362301975156672"

export class DieselAmmContractProcessor extends FuelAbstractProcessor<DieselAmmContract> {
  static bind(options: Omit<FuelProcessorConfig, 'abi'>) {
    if (!options.name) {
      options.name = "DieselAmmContract"
    }
    let processor = getFuelProcessor(options) as DieselAmmContractProcessor
    if (!processor) {
      processor = new DieselAmmContractProcessor(DieselAmmContract.abi, {
        name: 'DieselAmmContract',
        ...options,
      })
      addFuelProcessor(options, processor)
    }
    return processor
  }

   

  
  onLogReentrancyError(handler: (log: FuelLog<ReentrancyErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<ReentrancyErrorOutput>([LogReentrancyErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogInputError(handler: (log: FuelLog<InputErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<InputErrorOutput>([LogInputErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogAmmError(handler: (log: FuelLog<AmmErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<AmmErrorOutput>([LogAmmErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogTotalSupplyEvent(handler: (log: FuelLog<TotalSupplyEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<TotalSupplyEventOutput>([LogTotalSupplyEventId], (log, ctx) => handler(log, ctx))
  }

  onLogBurnEvent(handler: (log: FuelLog<BurnEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<BurnEventOutput>([LogBurnEventId], (log, ctx) => handler(log, ctx))
  }

  onLogSetNameEvent(handler: (log: FuelLog<SetNameEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<SetNameEventOutput>([LogSetNameEventId], (log, ctx) => handler(log, ctx))
  }

  onLogSetSymbolEvent(handler: (log: FuelLog<SetSymbolEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<SetSymbolEventOutput>([LogSetSymbolEventId], (log, ctx) => handler(log, ctx))
  }

  onLogSetDecimalsEvent(handler: (log: FuelLog<SetDecimalsEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<SetDecimalsEventOutput>([LogSetDecimalsEventId], (log, ctx) => handler(log, ctx))
  }

  onLogCreatePoolEvent(handler: (log: FuelLog<CreatePoolEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<CreatePoolEventOutput>([LogCreatePoolEventId], (log, ctx) => handler(log, ctx))
  }

  onLogMintEvent(handler: (log: FuelLog<MintEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<MintEventOutput>([LogMintEventId], (log, ctx) => handler(log, ctx))
  }

  onLogAccessError(handler: (log: FuelLog<AccessErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<AccessErrorOutput>([LogAccessErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogSwapEvent(handler: (log: FuelLog<SwapEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<SwapEventOutput>([LogSwapEventId], (log, ctx) => handler(log, ctx))
  }

  onLogInitializationError(handler: (log: FuelLog<InitializationErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<InitializationErrorOutput>([LogInitializationErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogOwnershipSet(handler: (log: FuelLog<OwnershipSetOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<OwnershipSetOutput>([LogOwnershipSetId], (log, ctx) => handler(log, ctx))
  }

  onLogOwnershipTransferred(handler: (log: FuelLog<OwnershipTransferredOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<OwnershipTransferredOutput>([LogOwnershipTransferredId], (log, ctx) => handler(log, ctx))
  }

}

export class DieselAmmContractProcessorTemplate extends FuelBaseProcessorTemplate<DieselAmmContract> {
  bindInternal(options: Omit<FuelProcessorConfig, 'abi'>) {
    return DieselAmmContractProcessor.bind(options)
  }

  
  onLogReentrancyError(handler: (log: FuelLog<ReentrancyErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<ReentrancyErrorOutput>([LogReentrancyErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogInputError(handler: (log: FuelLog<InputErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<InputErrorOutput>([LogInputErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogAmmError(handler: (log: FuelLog<AmmErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<AmmErrorOutput>([LogAmmErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogTotalSupplyEvent(handler: (log: FuelLog<TotalSupplyEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<TotalSupplyEventOutput>([LogTotalSupplyEventId], (log, ctx) => handler(log, ctx))
  }

  onLogBurnEvent(handler: (log: FuelLog<BurnEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<BurnEventOutput>([LogBurnEventId], (log, ctx) => handler(log, ctx))
  }

  onLogSetNameEvent(handler: (log: FuelLog<SetNameEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<SetNameEventOutput>([LogSetNameEventId], (log, ctx) => handler(log, ctx))
  }

  onLogSetSymbolEvent(handler: (log: FuelLog<SetSymbolEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<SetSymbolEventOutput>([LogSetSymbolEventId], (log, ctx) => handler(log, ctx))
  }

  onLogSetDecimalsEvent(handler: (log: FuelLog<SetDecimalsEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<SetDecimalsEventOutput>([LogSetDecimalsEventId], (log, ctx) => handler(log, ctx))
  }

  onLogCreatePoolEvent(handler: (log: FuelLog<CreatePoolEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<CreatePoolEventOutput>([LogCreatePoolEventId], (log, ctx) => handler(log, ctx))
  }

  onLogMintEvent(handler: (log: FuelLog<MintEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<MintEventOutput>([LogMintEventId], (log, ctx) => handler(log, ctx))
  }

  onLogAccessError(handler: (log: FuelLog<AccessErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<AccessErrorOutput>([LogAccessErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogSwapEvent(handler: (log: FuelLog<SwapEventOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<SwapEventOutput>([LogSwapEventId], (log, ctx) => handler(log, ctx))
  }

  onLogInitializationError(handler: (log: FuelLog<InitializationErrorOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<InitializationErrorOutput>([LogInitializationErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogOwnershipSet(handler: (log: FuelLog<OwnershipSetOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<OwnershipSetOutput>([LogOwnershipSetId], (log, ctx) => handler(log, ctx))
  }

  onLogOwnershipTransferred(handler: (log: FuelLog<OwnershipTransferredOutput>, ctx: FuelContractContext<DieselAmmContract>) => void | Promise<void>) {
    return super.onLog<OwnershipTransferredOutput>([LogOwnershipTransferredId], (log, ctx) => handler(log, ctx))
  }
}

